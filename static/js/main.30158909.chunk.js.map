{"version":3,"sources":["components/Formulario.js","components/Cancion.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","guardarBusquedaLetra","useState","artista","cancion","busqueda","guardarBusqueda","error","guardarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","type","placeholder","onChange","Cancion","letra","length","Info","info","Object","keys","strArtistThumb","strGenre","strBiographyES","src","alt","href","strFacebook","rel","strTwitter","strLastFMChart","App","busquedaLetra","guardarLetra","guardarInfo","useEffect","a","url","url2","Promise","all","axios","informacion","data","lyrics","artists","consultarApiLetra","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.30158909.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Formulario = ({guardarBusquedaLetra}) => {\n  const [busqueda, guardarBusqueda] = useState({ artista: 'Coldplay', cancion: 'Adventure of a Lifetime' });\n  const [error, guardarError] = useState(false);\n\n  const { artista, cancion } = busqueda;\n\n  const actualizarState = (e) => {\n    guardarBusqueda({\n      ...busqueda,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const buscarInformacion = (e) => {\n    e.preventDefault();\n\n    if (artista.trim() === \"\" || cancion.trim() === \"\") {\n      guardarError(true);\n      return;\n    }\n\n    guardarError(false);\n    guardarBusquedaLetra(busqueda)\n  };\n\n  return (\n    <div className=\"bg-info\">\n      {error ? (\n        <p className=\"alert alert-danger text-center p-2\">\n          Todos los campos son obligarorios\n        </p>\n      ) : null}\n      <div className=\"container\">\n        <div className=\"row\">\n          <form\n            onSubmit={buscarInformacion}\n            className=\"col card text-white bg-transparent mb-5 pt-5 pb-2 \"\n          >\n            <fieldset>\n              <legend className=\"text-center\">Buscador Letras Canciones</legend>\n              <div className=\"row\">\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label>Artista</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"artista\"\n                      placeholder=\"Artista\"\n                      onChange={actualizarState}\n                      value={artista}\n                    ></input>\n                  </div>\n                </div>\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label>Cancion</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"cancion\"\n                      placeholder=\"Cancion\"\n                      onChange={actualizarState}\n                      value={cancion}\n                    ></input>\n                  </div>\n                </div>\n              </div>\n\n              <button type=\"submit\" className=\"btn btn-primary float-right\">\n                Buscar\n              </button>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nFormulario.propTypes = {};\n\nexport default Formulario;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Cancion = ({ letra }) => {\n\n  if (letra.length === 0) return null;\n\n  return (\n    <Fragment>\n      <h2>Letra Canción</h2>\n      <p className=\"letra\">{letra}</p>\n    </Fragment>\n  );\n};\n\nCancion.propTypes = {};\n\nexport default Cancion;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Info = ({ info }) => {\n  if (Object.keys(info).length === 0) return null;\n\n  const { strArtistThumb, strGenre, strBiographyES } = info;\n\n  return (\n    <div className=\"card border-light\">\n      <div className=\"card-header bg-primary text-light font-weight-bold\">\n        Información Artista\n      </div>\n      <div className=\"card-body\">\n        <img src={strArtistThumb} alt=\"Logo Artista\"></img>\n        <p className=\"card-text\">Género: {strGenre}</p>\n        <h2 className=\"card-text\">Biografía:</h2>\n        <p className=\"card-text\">{strBiographyES}</p>\n        <p className=\"card-text\">\n          <a\n            href={`https://${info.strFacebook}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-facebook\"></i>\n          </a>\n          <a\n            href={`https://${info.strTwitter}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-twitter\"></i>\n          </a>\n          <a\n            href={`${info.strLastFMChart}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-lastfm\"></i>\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nInfo.propTypes = {};\n\nexport default Info;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cancion from \"./components/Cancion\";\nimport Info from \"./components/Info\";\n\nimport axios from \"axios\";\n\nfunction App() {\n  const [busquedaLetra, guardarBusquedaLetra] = useState({});\n  const [letra, guardarLetra] = useState(\"\");\n  const [info, guardarInfo] = useState({});\n\n  useEffect(() => {\n    if (Object.keys(busquedaLetra).length === 0) return;\n\n    const consultarApiLetra = async () => {\n      const { artista, cancion } = busquedaLetra;\n      const url = `https://api.lyrics.ovh/v1/${artista}}/${cancion}`;\n      const url2 = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${artista}`;\n\n      const [letra,informacion] = await Promise.all([\n        axios(url),\n        axios(url2)\n      ]);\n\n      guardarLetra(letra.data.lyrics);\n      guardarInfo(informacion.data.artists[0])\n    };\n\n    consultarApiLetra();\n  }, [busquedaLetra,guardarInfo]);\n\n  return (\n    <Fragment>\n      <Formulario guardarBusquedaLetra={guardarBusquedaLetra} />\n      <div className=\"container\">\n        <div className=\"row pt-5\">\n          <div className=\"col-md-6\">\n            <Info \n              info={info}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <Cancion letra={letra}/>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}